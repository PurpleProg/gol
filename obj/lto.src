	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -1212
	call	__frameset
	ld	bc, -1206
	lea	iy, ix
	add	iy, bc
	ld	bc, -1212
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy
	ld	bc, -1209
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	call	_gfx_Begin
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTransparentColor
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	bc, -1209
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 41
	ld	bc, -1212
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 41), 1
	push	hl
	pop	de
	inc	de
	ld	bc, 6
	ldir
BB0_1:
	ld	bc, -1209
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_update
	pop	hl
	ld	bc, -1209
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_render
	pop	hl
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB0_1
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_update
_update:
	ld	hl, -1224
	call	__frameset
	ld	de, (ix + 6)
	ld	iy, 0
	ld	bc, -1206
	lea	hl, ix
	add	hl, bc
	ld	bc, 30
	ld	(ix - 3), bc
	push	ix
	ld	bc, -1209
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -1215
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -1212
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -1218
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, iy
	push	de
	pop	hl
	ld	bc, (ix - 3)
BB1_1:
	ld	(ix - 3), de
	ld	de, -1221
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	push	de
	pop	bc
	jr	z, BB1_5
BB1_2:
	push	bc
	pop	hl
	ld	de, 40
	or	a, a
	sbc	hl, de
	jr	z, BB1_4
	ld	de, -1218
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	ld	a, (iy)
	ld	de, -1215
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy), a
	inc	bc
	jr	BB1_2
BB1_4:
	ld	de, -1221
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	inc	hl
	ld	de, -1218
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -1215
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	bc, 30
	ld	de, 0
	jp	BB1_1
BB1_5:
	ld	bc, -1209
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -1218
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, (ix + 6)
	push	ix
	ld	bc, -1215
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	de
	pop	iy
BB1_6:
	ld	bc, 30
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	push	de
	pop	hl
	jp	z, BB1_17
BB1_7:
	push	hl
	pop	bc
	ld	de, 40
	or	a, a
	sbc	hl, de
	jp	z, BB1_16
	ld	de, -1224
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	push	iy
	ld	de, -1221
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	bc
	ld	hl, (ix + 6)
	push	hl
	call	_count_neighbours
	push	hl
	pop	de
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -1215
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(ix - 3), de
	push	ix
	ld	de, -1221
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	iy, bc
	bit	0, (iy)
	ld	de, (ix - 3)
	jr	nz, BB1_10
	ex	de, hl
	ld	de, 3
	or	a, a
	sbc	hl, de
	ld	a, 1
	jr	z, BB1_14
	jr	BB1_15
BB1_10:
	push	de
	pop	hl
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB1_12
	ld	bc, -1218
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(ix - 3), de
	push	ix
	ld	de, -1221
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	iy, bc
	ld	(iy), 0
	ld	de, (ix - 3)
BB1_12:
	push	de
	pop	hl
	ld	bc, -2
	call	__iand
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jr	z, BB1_14
	ex	de, hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	a, d
	jp	m, BB1_15
BB1_14:
	ld	bc, -1218
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	push	ix
	ld	bc, -1221
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	iy, de
	ld	(iy), a
BB1_15:
	ld	bc, -1221
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	ld	bc, -1224
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	jp	BB1_7
BB1_16:
	inc	iy
	lea	hl, iy
	ld	bc, -1215
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -1218
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	push	hl
	pop	iy
	ld	de, 0
	jp	BB1_6
BB1_17:
	push	de
	pop	hl
BB1_18:
	ld	(ix - 3), de
	ld	de, -1215
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	push	de
	pop	bc
	jr	z, BB1_22
BB1_19:
	push	bc
	pop	hl
	ld	de, 40
	or	a, a
	sbc	hl, de
	jr	z, BB1_21
	ld	de, -1209
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	ld	a, (iy)
	ld	de, -1212
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	ld	(iy), a
	inc	bc
	jr	BB1_19
BB1_21:
	ld	bc, -1215
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	ld	bc, -1209
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -1212
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	lea	iy, iy + 40
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	de, 0
	ld	bc, 30
	jp	BB1_18
BB1_22:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_render
_render:
	ld	hl, -15
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 30
	ld	bc, 0
BB2_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB2_6
	ld	(ix - 9), bc
	ld	a, c
	ld	b, 3
	call	__bshl
	ld	l, a
	ld	(ix - 12), hl
	ld	iy, 0
	ld	hl, (ix - 3)
	ld	(ix - 6), hl
	ld	de, 8
BB2_3:
	lea	hl, iy
	ld	bc, 320
	or	a, a
	sbc	hl, bc
	jr	z, BB2_5
	ld	hl, (ix - 6)
	bit	0, (hl)
	push	de
	push	de
	ld	hl, (ix - 12)
	push	hl
	push	iy
	ld	(ix - 15), iy
	call	nz, _gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, 8
	ld	iy, (ix - 15)
	add	iy, de
	jr	BB2_3
BB2_5:
	ld	bc, (ix - 9)
	inc	bc
	ld	iy, (ix - 3)
	lea	iy, iy + 40
	ld	(ix - 3), iy
	ld	de, 30
	jr	BB2_1
BB2_6:
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_count_neighbours
_count_neighbours:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 9)
	ld	hl, (ix + 12)
	ld	bc, 40
	ld	de, -1
	ld	(ix - 3), de
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy
	ld	iy, (ix + 6)
	add	iy, bc
	lea	hl, iy - 41
	ld	(ix - 6), hl
	ld	bc, 2
	or	a, a
	sbc	hl, hl
	ld	(ix - 9), hl
BB3_1:
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	z, BB3_9
	ld	bc, 0
BB3_3:
	push	bc
	pop	hl
	ld	de, 3
	or	a, a
	sbc	hl, de
	jr	z, BB3_8
	ld	hl, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_6
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	jr	z, BB3_7
BB3_6:
	ld	iy, (ix - 6)
	add	iy, bc
	ld	de, 0
	ld	e, (iy)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
BB3_7:
	inc	bc
	jr	BB3_3
BB3_8:
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	iy, (ix - 6)
	lea	iy, iy + 40
	ld	(ix - 6), iy
	ld	bc, 2
	jr	BB3_1
BB3_9:
	ld	hl, (ix - 9)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.data,"aw",@progbits
	public	_global_palette
_global_palette:
	db	0, 0, "ÿÿ"

	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	ident	"clang version 15.0.0 (https://github.com/jacobly0/llvm-project 5f8512f22751066573aa48ac848a6d2195838ac3)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_gfx_SetTransparentColor
	extern	_gfx_FillRectangle_NoClip
	extern	_gfx_Begin
	extern	_kb_Scan
	extern	_gfx_SetDraw
	extern	__setflag
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_Blit
	extern	__iand
	extern	__imulu
	extern	_gfx_SetColor
	extern	__bshl
	extern	_gfx_End
